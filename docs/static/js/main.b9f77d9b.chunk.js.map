{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Chronometer","useState","initialValue","count","setCount","undefined","counterId","setCounterId","useEffect","stopCounter","minutes","Math","floor","seconds","milliseconds","value","hours","maxLength","filter","element","map","input","toString","padStart","padZero","join","formatCount","onClick","setInterval","prevCount","disabled","clearInterval","App","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oRA+CA,SAASA,IAAc,MAGqBC,mBAAS,MAH9B,mBAGZC,EAHY,aAIOD,mBAASC,IAJhB,mBAIZC,EAJY,KAILC,EAJK,OAKeH,wBAAqCI,GALpD,mBAKZC,EALY,KAKDC,EALC,KASnB,OAFAC,qBA+DA,WAEI,OAAOC,IAjEwB,CAACH,IAGhC,6BACI,6BAuEL,SAAqBH,GACxB,IAAMO,EAAUC,KAAKC,MAAMT,EAAQ,GAAK,KAClCU,EAAUF,KAAKC,MAAMT,EAAQ,KAAQ,GAE3C,OAtGJ,EAsG8B,CAACO,UAASG,UAASC,aADxBX,EAAQ,KApGtB,CACH,CAACY,MAFgF,EAA5DC,OAGrB,CAACD,MAHgF,EAArDL,QAGXO,UAAW,GAC5B,CAACF,MAJgF,EAA5CF,QAIpBI,UAAW,GAC5B,CAACF,MALgF,EAAnCD,aAKxBG,UAAW,IAEhCC,QAAO,SAAAC,GAAO,MAA6B,qBAAlBA,EAAQJ,SACjCK,KAAI,gBAAEL,EAAF,EAAEA,MAAOE,EAAT,EAASA,UAAT,OACDA,EAbZ,SAAiBI,EAAwBJ,GACrC,OAAOI,EAAMC,WAAWC,SAASN,EAAW,KAa9BO,CAAQT,EAAOE,GACfF,EAAMO,cAEfG,KAAK,OAbd,MA4BiBC,CAAYvB,IAGjB,6BACI,4BACIwB,QAAS,WACArB,GACDC,EACIqB,aAAY,WACRxB,GAAS,SAAAyB,GAAS,OAAIA,EAlDzC,cAuDGC,WAAYxB,GAVhB,YAcA,4BACIqB,QAAS,YACArB,GAAaH,GA7DzB,IA8DWI,EACIqB,aAAY,WACRxB,GAAS,SAAAyB,GACL,OAAIA,GAjE3B,GAkEkCA,EAlElC,IAoE2BpB,IACAF,OAAaF,GACN,QAtElC,MA6EGyB,WAAYxB,GAlBhB,cAsBA,4BACIqB,QAAS,WACLlB,IACAF,OAAaF,IAEjByB,UAAWxB,GALf,QASA,4BAAQqB,QAAS,WACbvB,EAASF,KADb,WAcZ,SAASO,IACDH,GACAyB,cAAczB,IAYX0B,MArIf,WACI,OACI,yBAAKC,UAAU,OACX,kBAACjC,EAAD,QCMQkC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,kBAAC,EAAD,OAEJC,SAASC,eAAe,SDiItB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.b9f77d9b.chunk.js","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport './App.css';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Chronometer />\n        </div>\n    );\n}\n\ninterface ChronometerState {\n    app: {\n        isCounting: boolean,\n        count: number,\n    }\n}\n\nconst INTERVAL = 10;\n\ninterface DateFormat {\n    hours?: number;\n    minutes?: number;\n    seconds: number;\n    milliseconds: number;\n}\n\nfunction padZero(input: string | number, maxLength: number): string {\n    return input.toString().padStart(maxLength, \"0\");\n}\n\nfunction dateFormatToString({hours, minutes, seconds, milliseconds}: DateFormat): string {\n    return [\n        {value: hours},\n        {value: minutes, maxLength: 2},\n        {value: seconds, maxLength: 2},\n        {value: milliseconds, maxLength: 3},\n    ]\n        .filter(element => typeof element.value !== \"undefined\")\n        .map(({value, maxLength}) =>\n            maxLength\n                ? padZero(value, maxLength)\n                : value.toString()\n        )\n        .join(\" : \");\n}\n\nfunction Chronometer() {\n    // const [appState, setAppState] = useState<ChronometerState>({app: {isCounting: false, count: 0}});\n    // const [initialValue, setInitialValue] = useState(0);\n    const [initialValue, setInitialValue] = useState(25 * 60 * 1000);\n    const [count, setCount] = useState(initialValue);\n    const [counterId, setCounterId] = useState<NodeJS.Timeout | undefined>(undefined);\n\n    useEffect(cleanUpCounterOnUnmount, [counterId]);\n\n    return (\n        <div>\n            <div>\n                {formatCount(count)}\n            </div>\n\n            <div>\n                <button\n                    onClick={() => {\n                        if (!counterId) {\n                            setCounterId(\n                                setInterval(() => {\n                                    setCount(prevCount => prevCount + INTERVAL);\n                                }, INTERVAL)\n                            );\n                        }\n                    }}\n                    disabled={!!counterId}\n                >\n                    Count up\n                </button>\n                <button\n                    onClick={() => {\n                        if (!counterId && count >= INTERVAL) {\n                            setCounterId(\n                                setInterval(() => {\n                                    setCount(prevCount => {\n                                        if (prevCount >= INTERVAL) {\n                                            return prevCount - INTERVAL\n                                        } else {\n                                            stopCounter();\n                                            setCounterId(undefined);\n                                            return 0;\n                                        }\n                                    });\n                                }, INTERVAL)\n                            );\n                        }\n                    }}\n                    disabled={!!counterId}\n                >\n                    Count down\n                </button>\n                <button\n                    onClick={() => {\n                        stopCounter();\n                        setCounterId(undefined);\n                    }}\n                    disabled={!counterId}\n                >\n                    Stop\n                </button>\n                <button onClick={() => {\n                    setCount(initialValue);\n                }}>\n                    Reset\n                </button>\n            </div>\n        </div>\n    )\n\n    function cleanUpCounterOnUnmount() {\n        // clearInterval on unmount to avoid memory leak\n        return stopCounter;\n    }\n\n    function stopCounter() {\n        if (counterId) {\n            clearInterval(counterId);\n        }\n    }\n}\n\nexport function formatCount(count: number): string {\n    const minutes = Math.floor(count / 60 / 1000);\n    const seconds = Math.floor(count / 1000) % 60;\n    const milliseconds = count % 1000;\n    return dateFormatToString({minutes, seconds, milliseconds})\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}